/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __UNLINK_MONITOR_BPF_SKEL_H__
#define __UNLINK_MONITOR_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

#define BPF_SKEL_SUPPORTS_MAP_AUTO_ATTACH 1

struct unlink_monitor_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *events;
	} maps;
	struct {
		struct bpf_program *do_unlinkat;
	} progs;
	struct {
		struct bpf_link *do_unlinkat;
	} links;

#ifdef __cplusplus
	static inline struct unlink_monitor_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct unlink_monitor_bpf *open_and_load();
	static inline int load(struct unlink_monitor_bpf *skel);
	static inline int attach(struct unlink_monitor_bpf *skel);
	static inline void detach(struct unlink_monitor_bpf *skel);
	static inline void destroy(struct unlink_monitor_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
unlink_monitor_bpf__destroy(struct unlink_monitor_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
unlink_monitor_bpf__create_skeleton(struct unlink_monitor_bpf *obj);

static inline struct unlink_monitor_bpf *
unlink_monitor_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct unlink_monitor_bpf *obj;
	int err;

	obj = (struct unlink_monitor_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = unlink_monitor_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	unlink_monitor_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct unlink_monitor_bpf *
unlink_monitor_bpf__open(void)
{
	return unlink_monitor_bpf__open_opts(NULL);
}

static inline int
unlink_monitor_bpf__load(struct unlink_monitor_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct unlink_monitor_bpf *
unlink_monitor_bpf__open_and_load(void)
{
	struct unlink_monitor_bpf *obj;
	int err;

	obj = unlink_monitor_bpf__open();
	if (!obj)
		return NULL;
	err = unlink_monitor_bpf__load(obj);
	if (err) {
		unlink_monitor_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
unlink_monitor_bpf__attach(struct unlink_monitor_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
unlink_monitor_bpf__detach(struct unlink_monitor_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *unlink_monitor_bpf__elf_bytes(size_t *sz);

static inline int
unlink_monitor_bpf__create_skeleton(struct unlink_monitor_bpf *obj)
{
	struct bpf_object_skeleton *s;
	struct bpf_map_skeleton *map __attribute__((unused));
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "unlink_monitor_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = 24;
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt,
			sizeof(*s->maps) > 24 ? sizeof(*s->maps) : 24);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	map = (struct bpf_map_skeleton *)((char *)s->maps + 0 * s->map_skel_sz);
	map->name = "events";
	map->map = &obj->maps.events;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "do_unlinkat";
	s->progs[0].prog = &obj->progs.do_unlinkat;
	s->progs[0].link = &obj->links.do_unlinkat;

	s->data = unlink_monitor_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *unlink_monitor_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x10\x0b\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0d\0\
\x01\0\x79\x17\x68\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\
\x04\x01\0\0\xb7\x03\0\0\0\0\0\0\x85\0\0\0\x83\0\0\0\xbf\x06\0\0\0\0\0\0\x15\
\x06\x16\0\0\0\0\0\x85\0\0\0\x0e\0\0\0\x77\0\0\0\x20\0\0\0\x63\x06\0\0\0\0\0\0\
\xb7\x01\0\0\0\0\0\0\x0f\x17\0\0\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\xf8\
\xff\xff\xff\xb7\x02\0\0\x08\0\0\0\xbf\x73\0\0\0\0\0\0\x85\0\0\0\x71\0\0\0\xbf\
\x61\0\0\0\0\0\0\x07\x01\0\0\x04\0\0\0\x79\xa3\xf8\xff\0\0\0\0\x15\x03\x03\0\0\
\0\0\0\xb7\x02\0\0\0\x01\0\0\x85\0\0\0\x2d\0\0\0\x05\0\x02\0\0\0\0\0\xb7\x02\0\
\0\0\0\0\0\x73\x21\0\0\0\0\0\0\xbf\x61\0\0\0\0\0\0\xb7\x02\0\0\0\0\0\0\x85\0\0\
\0\x84\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x44\x75\x61\x6c\x20\x42\x53\
\x44\x2f\x47\x50\x4c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\xeb\x01\0\x18\
\0\0\0\0\0\0\0\xd8\x02\0\0\xd8\x02\0\0\xc8\x02\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\
\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\
\x04\0\0\0\x1b\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\
\x06\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\0\0\0\x01\0\0\0\0\x02\
\0\0\x04\x10\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\x1e\0\0\0\x05\0\0\0\x40\0\0\0\
\x2a\0\0\0\0\0\0\x0e\x07\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x0a\0\0\0\x31\0\0\0\
\x15\0\0\x04\xa8\0\0\0\x39\0\0\0\x0b\0\0\0\0\0\0\0\x3d\0\0\0\x0b\0\0\0\x40\0\0\
\0\x41\0\0\0\x0b\0\0\0\x80\0\0\0\x45\0\0\0\x0b\0\0\0\xc0\0\0\0\x49\0\0\0\x0b\0\
\0\0\0\x01\0\0\x4c\0\0\0\x0b\0\0\0\x40\x01\0\0\x4f\0\0\0\x0b\0\0\0\x80\x01\0\0\
\x53\0\0\0\x0b\0\0\0\xc0\x01\0\0\x57\0\0\0\x0b\0\0\0\0\x02\0\0\x5a\0\0\0\x0b\0\
\0\0\x40\x02\0\0\x5d\0\0\0\x0b\0\0\0\x80\x02\0\0\x60\0\0\0\x0b\0\0\0\xc0\x02\0\
\0\x63\0\0\0\x0b\0\0\0\0\x03\0\0\x66\0\0\0\x0b\0\0\0\x40\x03\0\0\x69\0\0\0\x0b\
\0\0\0\x80\x03\0\0\x6c\0\0\0\x0b\0\0\0\xc0\x03\0\0\x74\0\0\0\x0b\0\0\0\0\x04\0\
\0\x77\0\0\0\x0b\0\0\0\x40\x04\0\0\x7a\0\0\0\x0b\0\0\0\x80\x04\0\0\x80\0\0\0\
\x0b\0\0\0\xc0\x04\0\0\x83\0\0\0\x0b\0\0\0\0\x05\0\0\x86\0\0\0\0\0\0\x01\x08\0\
\0\0\x40\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\x94\0\0\0\x09\0\0\0\x98\0\0\0\x01\
\0\0\x0c\x0c\0\0\0\xaa\x01\0\0\x05\0\0\x04\x20\0\0\0\xb3\x01\0\0\x0f\0\0\0\0\0\
\0\0\xb8\x01\0\0\x0f\0\0\0\x40\0\0\0\xbd\x01\0\0\x02\0\0\0\x80\0\0\0\xc4\x01\0\
\0\x12\0\0\0\xc0\0\0\0\xca\x01\0\0\x13\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\x02\x10\0\
\0\0\0\0\0\0\0\0\0\x0a\x11\0\0\0\xd0\x01\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\
\0\0\0\0\0\0\x02\x18\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x10\0\0\0\x04\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x03\0\0\0\0\x11\0\0\0\x04\0\0\0\x0d\0\0\0\xa6\x02\0\0\0\0\0\
\x0e\x14\0\0\0\x01\0\0\0\xae\x02\0\0\x01\0\0\x0f\0\0\0\0\x08\0\0\0\0\0\0\0\x10\
\0\0\0\xb4\x02\0\0\x01\0\0\x0f\0\0\0\0\x15\0\0\0\0\0\0\0\x0d\0\0\0\xbc\x02\0\0\
\0\0\0\x07\0\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\
\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x74\x79\x70\x65\0\x6d\x61\x78\x5f\x65\x6e\
\x74\x72\x69\x65\x73\0\x65\x76\x65\x6e\x74\x73\0\x70\x74\x5f\x72\x65\x67\x73\0\
\x72\x31\x35\0\x72\x31\x34\0\x72\x31\x33\0\x72\x31\x32\0\x62\x70\0\x62\x78\0\
\x72\x31\x31\0\x72\x31\x30\0\x72\x39\0\x72\x38\0\x61\x78\0\x63\x78\0\x64\x78\0\
\x73\x69\0\x64\x69\0\x6f\x72\x69\x67\x5f\x61\x78\0\x69\x70\0\x63\x73\0\x66\x6c\
\x61\x67\x73\0\x73\x70\0\x73\x73\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\
\x6e\x67\0\x63\x74\x78\0\x64\x6f\x5f\x75\x6e\x6c\x69\x6e\x6b\x61\x74\0\x6b\x70\
\x72\x6f\x62\x65\x2f\x64\x6f\x5f\x75\x6e\x6c\x69\x6e\x6b\x61\x74\0\x30\x3a\x31\
\x33\0\x2f\x68\x6f\x6d\x65\x2f\x62\x65\x72\x73\x65\x72\x6b\x2f\x44\x65\x73\x6b\
\x74\x6f\x70\x2f\x66\x69\x6d\x2f\x65\x62\x70\x66\x2f\x74\x75\x74\x6f\x72\x69\
\x61\x6c\x2f\x74\x65\x73\x74\x2f\x75\x6e\x6c\x69\x6e\x6b\x5f\x6d\x6f\x6e\x69\
\x74\x6f\x72\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x4b\x50\
\x52\x4f\x42\x45\x28\x64\x6f\x5f\x75\x6e\x6c\x69\x6e\x6b\x61\x74\x2c\x20\x69\
\x6e\x74\x20\x64\x66\x64\x2c\x20\x73\x74\x72\x75\x63\x74\x20\x66\x69\x6c\x65\
\x6e\x61\x6d\x65\x20\x2a\x6e\x61\x6d\x65\x29\0\x20\x20\x20\x20\x65\x20\x3d\x20\
\x62\x70\x66\x5f\x72\x69\x6e\x67\x62\x75\x66\x5f\x72\x65\x73\x65\x72\x76\x65\
\x28\x26\x65\x76\x65\x6e\x74\x73\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x2a\x65\
\x29\x2c\x20\x30\x29\x3b\0\x20\x20\x20\x20\x69\x66\x20\x28\x21\x65\x29\0\x20\
\x20\x20\x20\x65\x2d\x3e\x70\x69\x64\x20\x3d\x20\x62\x70\x66\x5f\x67\x65\x74\
\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x70\x69\x64\x5f\x74\x67\x69\x64\x28\x29\
\x20\x3e\x3e\x20\x33\x32\x3b\0\x66\x69\x6c\x65\x6e\x61\x6d\x65\0\x6e\x61\x6d\
\x65\0\x75\x70\x74\x72\0\x72\x65\x66\x63\x6e\x74\0\x61\x6e\x61\x6d\x65\0\x69\
\x6e\x61\x6d\x65\0\x63\x68\x61\x72\0\x30\x3a\x30\0\x20\x20\x20\x20\x66\x69\x6c\
\x65\x6e\x61\x6d\x65\x5f\x70\x74\x72\x20\x3d\x20\x42\x50\x46\x5f\x43\x4f\x52\
\x45\x5f\x52\x45\x41\x44\x28\x6e\x61\x6d\x65\x2c\x20\x6e\x61\x6d\x65\x29\x3b\0\
\x20\x20\x20\x20\x69\x66\x20\x28\x66\x69\x6c\x65\x6e\x61\x6d\x65\x5f\x70\x74\
\x72\x29\0\x20\x20\x20\x20\x20\x20\x20\x20\x62\x70\x66\x5f\x70\x72\x6f\x62\x65\
\x5f\x72\x65\x61\x64\x5f\x73\x74\x72\x28\x65\x2d\x3e\x66\x69\x6c\x65\x6e\x61\
\x6d\x65\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x65\x2d\x3e\x66\x69\x6c\x65\x6e\
\x61\x6d\x65\x29\x2c\x20\x66\x69\x6c\x65\x6e\x61\x6d\x65\x5f\x70\x74\x72\x29\
\x3b\0\x20\x20\x20\x20\x20\x20\x20\x20\x65\x2d\x3e\x66\x69\x6c\x65\x6e\x61\x6d\
\x65\x5b\x30\x5d\x20\x3d\x20\x27\x5c\x30\x27\x3b\0\x20\x20\x20\x20\x62\x70\x66\
\x5f\x72\x69\x6e\x67\x62\x75\x66\x5f\x73\x75\x62\x6d\x69\x74\x28\x65\x2c\x20\
\x30\x29\x3b\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2e\x6d\x61\x70\x73\0\x6c\x69\x63\
\x65\x6e\x73\x65\0\x61\x75\x64\x69\x74\x5f\x6e\x61\x6d\x65\x73\0\x9f\xeb\x01\0\
\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\xfc\0\0\0\x10\x01\0\0\x2c\0\0\0\x08\0\0\
\0\xa4\0\0\0\x01\0\0\0\0\0\0\0\x0d\0\0\0\x10\0\0\0\xa4\0\0\0\x0f\0\0\0\0\0\0\0\
\xbc\0\0\0\xfe\0\0\0\x05\x58\0\0\x08\0\0\0\xbc\0\0\0\x3a\x01\0\0\x09\x6c\0\0\
\x38\0\0\0\xbc\0\0\0\x6f\x01\0\0\x09\x70\0\0\x40\0\0\0\xbc\0\0\0\x7b\x01\0\0\
\x0e\x7c\0\0\x48\0\0\0\xbc\0\0\0\x7b\x01\0\0\x29\x7c\0\0\x50\0\0\0\xbc\0\0\0\
\x7b\x01\0\0\x0c\x7c\0\0\x70\0\0\0\xbc\0\0\0\x7b\x01\0\0\x0e\x7c\0\0\x78\0\0\0\
\xbc\0\0\0\xd9\x01\0\0\x14\x80\0\0\x90\0\0\0\xbc\0\0\0\0\0\0\0\0\0\0\0\xa0\0\0\
\0\xbc\0\0\0\xd9\x01\0\0\x14\x80\0\0\xa8\0\0\0\xbc\0\0\0\x07\x02\0\0\x09\x88\0\
\0\xb0\0\0\0\xbc\0\0\0\x1d\x02\0\0\x09\x8c\0\0\xd0\0\0\0\xbc\0\0\0\x69\x02\0\0\
\x18\x94\0\0\xd8\0\0\0\xbc\0\0\0\x88\x02\0\0\x05\x9c\0\0\xf0\0\0\0\xbc\0\0\0\
\xfe\0\0\0\x05\x58\0\0\x10\0\0\0\xa4\0\0\0\x02\0\0\0\0\0\0\0\x0a\0\0\0\xb7\0\0\
\0\0\0\0\0\x58\0\0\0\x0e\0\0\0\xd5\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x6f\0\0\0\0\0\x03\0\xf0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7d\0\0\0\0\0\x03\0\
\xc8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x76\0\0\0\0\0\x03\0\xd8\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x1f\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\x2b\0\0\0\
\x11\0\x06\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x67\0\0\0\x11\0\x05\0\0\0\0\0\0\
\0\0\0\x0d\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x01\0\0\0\x06\0\0\0\xc4\x02\0\0\0\0\
\0\0\x04\0\0\0\x06\0\0\0\xdc\x02\0\0\0\0\0\0\x04\0\0\0\x07\0\0\0\x2c\0\0\0\0\0\
\0\0\x04\0\0\0\x01\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x50\0\0\0\0\0\0\
\0\x04\0\0\0\x01\0\0\0\x60\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x70\0\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\x80\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x90\0\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\xa0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xb0\0\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\xc0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xd0\0\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\xe0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xf0\0\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\0\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x10\x01\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\x20\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x3c\x01\0\0\0\0\0\
\0\x04\0\0\0\x01\0\0\0\x4c\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x0f\x11\x10\0\
\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x2e\
\x72\x65\x6c\x6b\x70\x72\x6f\x62\x65\x2f\x64\x6f\x5f\x75\x6e\x6c\x69\x6e\x6b\
\x61\x74\0\x65\x76\x65\x6e\x74\x73\0\x2e\x6d\x61\x70\x73\0\x2e\x6c\x6c\x76\x6d\
\x5f\x61\x64\x64\x72\x73\x69\x67\0\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x73\x74\
\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x65\x6c\x2e\x42\x54\
\x46\0\x4c\x49\x43\x45\x4e\x53\x45\0\x4c\x42\x42\x30\x5f\x35\0\x4c\x42\x42\x30\
\x5f\x34\0\x4c\x42\x42\x30\x5f\x33\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x4e\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8b\x0a\0\0\0\0\
\0\0\x84\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\
\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\0\0\0\x01\0\0\0\x06\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x38\x09\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x0c\0\0\0\x03\0\0\0\x08\0\
\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x46\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x40\x01\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x32\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\x01\
\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x62\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x60\x01\0\0\0\0\0\0\xb8\
\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5e\0\0\0\
\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x48\x09\0\0\0\0\0\0\x20\0\0\0\0\0\
\0\0\x0c\0\0\0\x07\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x0b\0\0\0\x01\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x07\0\0\0\0\0\0\x5c\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\x09\0\0\0\x40\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x68\x09\0\0\0\0\0\0\x20\x01\0\0\0\0\0\0\x0c\0\0\0\x09\0\
\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x38\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\
\0\0\0\0\0\0\0\0\0\0\0\x88\x0a\0\0\0\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x56\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x78\x08\0\0\0\0\0\0\xc0\0\0\0\0\0\0\0\x01\0\0\0\x05\0\0\0\x08\0\0\0\0\
\0\0\0\x18\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct unlink_monitor_bpf *unlink_monitor_bpf::open(const struct bpf_object_open_opts *opts) { return unlink_monitor_bpf__open_opts(opts); }
struct unlink_monitor_bpf *unlink_monitor_bpf::open_and_load() { return unlink_monitor_bpf__open_and_load(); }
int unlink_monitor_bpf::load(struct unlink_monitor_bpf *skel) { return unlink_monitor_bpf__load(skel); }
int unlink_monitor_bpf::attach(struct unlink_monitor_bpf *skel) { return unlink_monitor_bpf__attach(skel); }
void unlink_monitor_bpf::detach(struct unlink_monitor_bpf *skel) { unlink_monitor_bpf__detach(skel); }
void unlink_monitor_bpf::destroy(struct unlink_monitor_bpf *skel) { unlink_monitor_bpf__destroy(skel); }
const void *unlink_monitor_bpf::elf_bytes(size_t *sz) { return unlink_monitor_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
unlink_monitor_bpf__assert(struct unlink_monitor_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __UNLINK_MONITOR_BPF_SKEL_H__ */
